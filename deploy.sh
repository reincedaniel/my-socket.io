#!/bin/bash

# Script de deploy para o Portainer
# Uso: ./deploy.sh [dev|prod]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

# Verificar se o Docker est√° a correr
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        error "Docker n√£o est√° a correr. Inicie o Docker e tente novamente."
        exit 1
    fi
    log "Docker est√° a correr"
}

# Verificar se o docker-compose est√° dispon√≠vel
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        error "docker-compose n√£o est√° instalado. Instale o docker-compose e tente novamente."
        exit 1
    fi
    log "docker-compose est√° dispon√≠vel"
}

# Build da imagem
build_image() {
    local env=$1
    log "A construir imagem para ambiente: $env"
    
    if [ "$env" = "dev" ]; then
        docker-compose -f docker-compose.dev.yml build
    else
        docker-compose -f docker-compose.prod.yml build
    fi
    
    log "Imagem constru√≠da com sucesso"
}

# Deploy da aplica√ß√£o
deploy_app() {
    local env=$1
    log "A fazer deploy da aplica√ß√£o para ambiente: $env"
    
    if [ "$env" = "dev" ]; then
        docker-compose -f docker-compose.dev.yml up -d
    else
        docker-compose -f docker-compose.prod.yml up -d
    fi
    
    log "Aplica√ß√£o deployada com sucesso"
}

# Verificar status da aplica√ß√£o
check_status() {
    log "A verificar status da aplica√ß√£o..."
    
    # Aguardar um pouco para a aplica√ß√£o inicializar
    sleep 5
    
    # Verificar se o container est√° a correr
    if docker ps | grep -q websocket-server; then
        log "Container est√° a correr"
        
        # Testar endpoint de health
        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            log "‚úÖ Aplica√ß√£o est√° a funcionar corretamente"
            log "üåê Acess√≠vel em: http://localhost:3000"
            log "üì° Endpoint de teste: http://localhost:3000/test"
        else
            warn "Aplica√ß√£o pode n√£o estar completamente inicializada"
        fi
    else
        error "Container n√£o est√° a correr"
        exit 1
    fi
}

# Fun√ß√£o principal
main() {
    local env=${1:-prod}
    
    log "üöÄ Iniciando deploy do WebSocket Server"
    log "Ambiente: $env"
    
    # Verifica√ß√µes
    check_docker
    check_docker_compose
    
    # Build e deploy
    build_image "$env"
    deploy_app "$env"
    
    # Verificar status
    check_status
    
    log "üéâ Deploy conclu√≠do com sucesso!"
    
    # Mostrar comandos √∫teis
    echo
    log "Comandos √∫teis:"
    echo "  - Ver logs: docker-compose -f docker-compose.$env.yml logs -f"
    echo "  - Parar: docker-compose -f docker-compose.$env.yml down"
    echo "  - Reiniciar: docker-compose -f docker-compose.$env.yml restart"
    echo "  - Status: docker-compose -f docker-compose.$env.yml ps"
}

# Verificar argumentos
if [ "$1" != "dev" ] && [ "$1" != "prod" ] && [ -n "$1" ]; then
    error "Uso: $0 [dev|prod]"
    error "  dev  - Ambiente de desenvolvimento"
    error "  prod - Ambiente de produ√ß√£o (padr√£o)"
    exit 1
fi

# Executar fun√ß√£o principal
main "$@"
